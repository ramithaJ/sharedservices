package com.wiley.gr.ace.authorservices.persistence.entity;

// Generated Aug 11, 2015 2:21:56 PM by Hibernate Tools 4.0.0

import java.sql.Clob;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

// TODO: Auto-generated Javadoc
/**
 * Notification generated by hbm2java.
 */
@Entity
@Table(name = "NOTIFICATION")
public class Notification implements java.io.Serializable {

	/** The id. */
	private Integer id;
	
	/** The template. */
	private Template template;
	
	/** The app id. */
	private String appId;
	
	/** The sender id. */
	private String senderId;
	
	/** The sender email. */
	private String senderEmail;
	
	/** The content. */
	private Clob content;
	
	/** The type. */
	private String type;
	
	/** The sent on. */
	private Date sentOn;
	
	/** The unread. */
	private Character unread;
	
	/** The attachment path. */
	private String attachmentPath;
	
	/** The notification recipientses. */
	private Set<NotificationRecipients> notificationRecipientses = new HashSet<NotificationRecipients>(
			0);

	/**
	 * Instantiates a new notification.
	 */
	public Notification() {
	}

	/**
	 * Instantiates a new notification.
	 *
	 * @param id the id
	 */
	public Notification(final Integer id) {
		this.id = id;
	}

	/**
	 * Instantiates a new notification.
	 *
	 * @param id the id
	 * @param template the template
	 * @param appId the app id
	 * @param senderId the sender id
	 * @param senderEmail the sender email
	 * @param content the content
	 * @param type the type
	 * @param sentOn the sent on
	 * @param unread the unread
	 * @param attachmentPath the attachment path
	 * @param notificationRecipientses the notification recipientses
	 */
	public Notification(final Integer id, final Template template, final String appId,
			final String senderId, final String senderEmail, final Clob content, final String type,
			final Date sentOn, final Character unread, final String attachmentPath,
			final Set<NotificationRecipients> notificationRecipientses) {
		this.id = id;
		this.template = template;
		this.appId = appId;
		this.senderId = senderId;
		this.senderEmail = senderEmail;
		this.content = content;
		this.type = type;
		this.sentOn = sentOn;
		this.unread = unread;
		this.attachmentPath = attachmentPath;
		this.notificationRecipientses = notificationRecipientses;
	}

	/**
	 * Gets the id.
	 *
	 * @return the id
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 22, scale = 0)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "NOTIFICATION_SEQ")
    @SequenceGenerator(name = "NOTIFICATION_SEQ", sequenceName = "NOTIFICATION_SEQ", allocationSize = 1)
	public Integer getId() {
		return this.id;
	}

	/**
	 * Sets the id.
	 *
	 * @param id the new id
	 */
	public void setId(final Integer id) {
		this.id = id;
	}

	/**
	 * Gets the template.
	 *
	 * @return the template
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ORIG_TMPL_ID")
	public Template getTemplate() {
		return this.template;
	}

	/**
	 * Sets the template.
	 *
	 * @param template the new template
	 */
	public void setTemplate(final Template template) {
		this.template = template;
	}

	/**
	 * Gets the app id.
	 *
	 * @return the app id
	 */
	@Column(name = "APP_ID", length = 25)
	public String getAppId() {
		return this.appId;
	}

	/**
	 * Sets the app id.
	 *
	 * @param appId the new app id
	 */
	public void setAppId(final String appId) {
		this.appId = appId;
	}

	/**
	 * Gets the sender id.
	 *
	 * @return the sender id
	 */
	@Column(name = "SENDER_ID")
	public String getSenderId() {
		return this.senderId;
	}

	/**
	 * Sets the sender id.
	 *
	 * @param senderId the new sender id
	 */
	public void setSenderId(final String senderId) {
		this.senderId = senderId;
	}

	/**
	 * Gets the sender email.
	 *
	 * @return the sender email
	 */
	@Column(name = "SENDER_EMAIL")
	public String getSenderEmail() {
		return this.senderEmail;
	}

	/**
	 * Sets the sender email.
	 *
	 * @param senderEmail the new sender email
	 */
	public void setSenderEmail(final String senderEmail) {
		this.senderEmail = senderEmail;
	}

	/**
	 * Gets the content.
	 *
	 * @return the content
	 */
	@Column(name = "CONTENT")
	public Clob getContent() {
		return this.content;
	}

	/**
	 * Sets the content.
	 *
	 * @param content the new content
	 */
	public void setContent(final Clob content) {
		this.content = content;
	}

	/**
	 * Gets the type.
	 *
	 * @return the type
	 */
	@Column(name = "TYPE", length = 25)
	public String getType() {
		return this.type;
	}

	/**
	 * Sets the type.
	 *
	 * @param type the new type
	 */
	public void setType(final String type) {
		this.type = type;
	}

	/**
	 * Gets the sent on.
	 *
	 * @return the sent on
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "SENT_ON", length = 7)
	public Date getSentOn() {
		return this.sentOn;
	}

	/**
	 * Sets the sent on.
	 *
	 * @param sentOn the new sent on
	 */
	public void setSentOn(final Date sentOn) {
		this.sentOn = sentOn;
	}

	/**
	 * Gets the unread.
	 *
	 * @return the unread
	 */
	@Column(name = "UNREAD", length = 1)
	public Character getUnread() {
		return this.unread;
	}

	/**
	 * Sets the unread.
	 *
	 * @param unread the new unread
	 */
	public void setUnread(final Character unread) {
		this.unread = unread;
	}

	/**
	 * Gets the attachment path.
	 *
	 * @return the attachment path
	 */
	@Column(name = "ATTACHMENT_PATH", length = 1000)
	public String getAttachmentPath() {
		return this.attachmentPath;
	}

	/**
	 * Sets the attachment path.
	 *
	 * @param attachmentPath the new attachment path
	 */
	public void setAttachmentPath(final String attachmentPath) {
		this.attachmentPath = attachmentPath;
	}

	/**
	 * Gets the notification recipientses.
	 *
	 * @return the notification recipientses
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "notification")
	public Set<NotificationRecipients> getNotificationRecipientses() {
		return this.notificationRecipientses;
	}

	/**
	 * Sets the notification recipientses.
	 *
	 * @param notificationRecipientses the new notification recipientses
	 */
	public void setNotificationRecipientses(
			final Set<NotificationRecipients> notificationRecipientses) {
		this.notificationRecipientses = notificationRecipientses;
	}

}
